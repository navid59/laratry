<?php

namespace App\Http\Controllers;

use App\Card;
use Illuminate\Http\Request;
use Netopia\Payment\PaymentAddress;
use Netopia\Payment\PaymentInvoice;
use Netopia\Payment\Request\PaymentRequestCard;

class CardsController extends Controller
{
    /**
     * all payment requests will be sent to the NETOPIA Payments server
     * SANDBOX : http://sandboxsecure.mobilpay.ro
     * LIVE : https://secure.mobilpay.ro
     */
    public $paymentUrl;
    /**
     * NETOPIA Payments is working only with Certificate. Each NETOPIA member has a certificate.
     * From your Admin panel you can download the Certificate.
     * is located in Admin -> Conturi de comerciant -> Detalii -> Setari securitate
     * the var $x509FilePath is path of your certificate in your platform
     * i.e: /home/certificates/public.cer
     */
    public $x509FilePath;
    /**
     * Billing Address
     */
    public $billingAddress;
    /**
     * Shipping Address
     */
    public $shippingAddress;
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $this->paymentUrl = 'http://sandboxsecure.mobilpay.ro';
        $this->x509FilePath = '/home/navid/Projects/laratry/certificates/sandbox.YN8Q-RH4J-39C1-FPAG-2P8A.public.cer';
        try {
            $paymentRequest = new PaymentRequestCard();
            $paymentRequest->signature = 'YN8Q-RH4J-39C1-FPAG-2P8A';//signature - generated by mobilpay.ro for every merchant account
            $paymentRequest->orderId = md5(uniqid(rand())); // order_id should be unique for a merchant account
            $paymentRequest->returnUrl = 'http://laratry.test/card/success'; // is where mobilPay redirects the client once the payment process is finished and is MANDATORY
            $paymentRequest->confirmUrl = 'http://laratry.test/ipn';// is where mobilPay will send the payment result and is MANDATORY

            /*
             * Invoices
             */
            $paymentRequest->invoice = new PaymentInvoice();
            $paymentRequest->invoice->currency = 'RON';
            $paymentRequest->invoice->amount = '20.00';
            $paymentRequest->invoice->tokenId = null;
            $paymentRequest->invoice->details = "Payment Via Composer library";

            /*
             * Billing Info
             */
            $this->billingAddress = new PaymentAddress();
            $this->billingAddress->type			= "person"; //should be "person" / "company"
            $this->billingAddress->firstName	= "Billing name";
            $this->billingAddress->lastName		= "Billing LastName";
            $this->billingAddress->address		= "Bulevardul Ion CreangÄƒ, Nr 00";
            $this->billingAddress->email		= "test@billing.com";
            $this->billingAddress->mobilePhone	= "0732123456";
            $paymentRequest->invoice->setBillingAddress($this->billingAddress);

            /*
             * Shipping
             */
            $this->shippingAddress = new PaymentAddress();
            $this->shippingAddress->type		= "person"; //should be "person" / "company"
            $this->shippingAddress->firstName	= "Shipping Name";
            $this->shippingAddress->lastName	= "Shipping LastName";
            $this->shippingAddress->address		= "Bulevardul Mihai Eminescu, Nr 00";
            $this->shippingAddress->email		= "test@shipping.com";
            $this->shippingAddress->mobilePhone	= "0721234567";
            $paymentRequest->invoice->setShippingAddress($this->shippingAddress);

            /*
             * encrypting
             */
            $paymentRequest->encrypt($this->x509FilePath);

            /**
             * send the following data to NETOPIA Payments server
             * Method : POST
             * URL : $paymentUrl
             * in this example we send the data from view
             */
            $action = $this->paymentUrl;
            $envKey = $paymentRequest->getEnvKey();
            $data   = $paymentRequest->getEncData();

            return view('card', compact('data', 'envKey', 'action'));

        }catch (\Exception $e)
        {
            return "Oops, There is a problem!";
        }
    }

    /**
     * Display a success of the payment action.
     *
     * @return \Illuminate\Http\Response
     */
    public function success()
    {
        $msg = "Success / Rejected Payment result";
        return view('success', compact('msg'));
    }

}
